/**
 * Copyright (c) 2017 European Organisation for Nuclear Research (CERN), All Rights Reserved.
 */

package cern.molr.supervisor;

import cern.molr.commons.conf.ObjectMapperConfiguration;
import cern.molr.supervisor.api.address.AddressGetter;
import cern.molr.supervisor.api.web.MolrSupervisorToServer;
import cern.molr.supervisor.impl.address.ConfigurationAddressGetter;
import cern.molr.supervisor.impl.web.MolrSupervisorToServerImpl;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.web.context.WebServerInitializedEvent;
import org.springframework.context.ApplicationListener;
import org.springframework.context.annotation.*;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Component;

import javax.annotation.PreDestroy;
import java.util.Arrays;
import java.util.Optional;


/**
 * Configuration to run a supervisor. This was split off from the supervisor main to be usable in other spring configurations.
 */
@Configuration
@ComponentScan
@Import(ObjectMapperConfiguration.class)
public class RemoteSupervisorConfiguration {

    private static final Logger LOGGER = LoggerFactory.getLogger(RemoteSupervisorConfiguration.class);

    private final AddressGetter addressGetter;
    private final SupervisorConfig config;
    //The supervisor id generated by MolR server
    private String supervisorId;

    public RemoteSupervisorConfiguration(ConfigurationAddressGetter addressGetter, SupervisorConfig config) {
        this.addressGetter = addressGetter;
        this.config = config;

    }

    /**
     * The registration request should be sent when the server is initialized
     */
    @Component
    private class RegistrationSender implements ApplicationListener<WebServerInitializedEvent> {

        @Override
        public void onApplicationEvent(WebServerInitializedEvent event) {
            addressGetter.addListener(address -> {
                MolrSupervisorToServer client = new MolrSupervisorToServerImpl(config.getMolrHost(), config.getMolrPort());
                try {
                    supervisorId = client.register(address.getHost(), address.getPort(), Arrays.asList(config
                            .getAcceptedMissions()));
                } catch (Exception error) {
                    LOGGER.error("error while attempting to register in the MolR server [host: {}, port: {}]",
                            config.getMolrHost(), config.getMolrPort(), error);
                }
            });
        }
    }

    @PreDestroy
    public void close() {
        MolrSupervisorToServer client = new MolrSupervisorToServerImpl(config.getMolrHost(), config.getMolrPort());

        try {
            client.unregister(supervisorId);
        } catch (Exception error) {
            LOGGER.error("error while attempting to unregister from MolR server [host: {}, port: {}]",
                    config.getMolrHost(), config.getMolrPort(), error);
        }
    }

}
