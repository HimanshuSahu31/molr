package cern.molr.commons.api.web;

import cern.molr.commons.api.response.SupervisorState;
import org.reactivestreams.Publisher;

import java.util.List;
import java.util.Optional;
import java.util.function.Function;

/**
 * A client service which allows to perform some defined http request to a server
 *
 * @author yassine-kr
 */
public interface MolrWebClient {

    /**
     * A method which should perform an instantiation request to a server
     *
     * @param missionName
     * @param missionArguments
     * @param mapper           the function to apply on the mission id received from the server
     * @param <I>              the argument type
     * @param <C>              the published element type (it is generally a controller)
     *
     * @return a stream of one element
     */
    <I, C> Publisher<C> instantiate(String missionName, I missionArguments, Function<String, C> mapper);

    /**
     * It is an synchronous method which sends the state request to the supervisor and waits for the response
     * It should return empty if there was a connection error or the response was a failure
     *
     * @return optional state supervisor
     */
    Optional<SupervisorState> getState();

    /**
     * It is a synchronous method which sends a registration request and waits for the response
     * It should throw an unchecked exception if there was a connection error or the response was a failure
     *
     * @return the supervisor Id generated by the server
     */
    String register(String host, int port, List<String> acceptedMissions);

    /**
     * It is a synchronous method which sends a registration request and waits for the response
     * It should throw an unchecked exception if there was a connection error or the response was a failure
     */
    void unregister(String supervisorId);
}
